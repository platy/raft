var searchIndex = JSON.parse('{\
"raft":{"doc":"","i":[[3,"NotLeader","raft","Error when a non-leader is asked to do something only a…",null,null],[0,"log","","",null,null],[3,"Item","raft::log","",null,null],[12,"term","","",0,null],[12,"command","","",0,null],[6,"Index","","",null,null],[6,"InVec","","",null,null],[8,"Log","","",null,null],[16,"Command","","",1,null],[10,"append","","Add a new command and return its index",1,[[["term",6]],["index",6]]],[10,"truncate_if_different_and_append","","Check items against existing items in log, remove from log…",1,[[["index",6]],["index",6]]],[10,"log_term_matches","","Check whether the log entry\'s term at the specified index…",1,[[["index",6],["term",6]]]],[11,"cmp","","Raft determines which of two logs is more up-to-date by…",1,[[["index",6],["term",6]],["ordering",4]]],[10,"last_log_term","","Term of the last log item",1,[[],["term",6]]],[10,"last_log_index","","Index of the last log item",1,[[],["index",6]]],[10,"get_command","","Command at index",1,[[["index",6]]]],[10,"get_term","","Term at index",1,[[["index",6]],[["option",4],["term",6]]]],[10,"get_from","","All items following and including the index",1,[[["index",6]],[["vec",3],["item",3]]]],[11,"new","","",0,[[["term",6]]]],[0,"rpc","raft","Raft servers communicate using remote procedure…",null,null],[3,"AppendEntriesRequest","raft::rpc","Invoked by leader to replicate log entries (§5.3); also…",null,null],[12,"term","","leader’s term",2,null],[12,"leader_id","","so follower can redirect clients",2,null],[12,"prev_log_index","","index of log entry immediately precedingnew ones",2,null],[12,"prev_log_term","","term of prevlog::Index entry",2,null],[12,"entries","","log entries to store (empty for heartbeat;may send more…",2,null],[12,"leader_commit","","leader’s commitIndex",2,null],[3,"AppendEntriesResponse","","",null,null],[12,"term","","currentTerm, for leader to update itself",3,null],[12,"success","","true if follower contained entry matching prevLogIndex and…",3,null],[3,"RequestVoteRequest","","Invoked by candidates to gather votes (§5.2).",null,null],[12,"term","","candidate’s term",4,null],[12,"candidate_id","","candidate requesting vote",4,null],[12,"last_log_index","","index of candidate’s last log entry (§5.4)",4,null],[12,"last_log_term","","term of candidate’s last log entry (§5.4)",4,null],[3,"RequestVoteResponse","","",null,null],[12,"term","","currentTerm, for candidate to update itself",5,null],[12,"vote_granted","","true means candidate received vote",5,null],[8,"RPCMessage","","",null,null],[10,"term","","",6,[[],["term",6]]],[0,"server","raft","",null,null],[3,"Server","raft::server","The logic of a raft server except for delay, timouts,…",null,null],[11,"new","","",7,[[["box",3],["serverid",6],["receiver",6],["persistent",3]]]],[11,"election_timeout","","No messages have been received over the election timeout.…",7,[[],["requestvoterequest",3]]],[11,"receive_append_entries","","While waiting for votes, a candidate may receive an…",7,[[["appendentriesrequest",3],["intoiterator",8]],["appendentriesresponse",3]]],[11,"receive_request_vote","","",7,[[["requestvoterequest",3]],["requestvoteresponse",3]]],[11,"receive_vote","","Receives a `RequestVote` response # Return if the server…",7,[[["serverid",6],["requestvoteresponse",3]],[["appendentriesrequest",3],["option",4]]]],[11,"receive_append_entries_response","","Receive response from `AppendEntriesRequest` - If…",7,[[["appendentriesresponse",3],["serverid",6],["index",6]],[["vec",3],["commandptr",6]]]],[11,"command","","Client adds a command # Return Command pointer, the client…",7,[[],[["notleader",3],["result",4],["commandptr",6]]]],[11,"heartbeat","","Call this on a timer from when an election is won, until a…",7,[[],["vec",3]]],[11,"get_state","","",7,[[],["serverstate",3]]],[0,"state","raft","",null,null],[3,"Persistent","raft::state","Persistent state on all servers:(Updated on stable storage…",null,null],[12,"current_term","","",8,null],[12,"voted_for","","",8,null],[12,"log","","",8,null],[3,"Leader","","",null,null],[12,"next_index","","",9,null],[12,"match_index","","",9,null],[3,"ServerState","","Volatile state on all servers",null,null],[4,"States","","Server states. Followers only respond to requestsfrom…",null,null],[13,"Follower","","",10,null],[13,"Candidate","","",10,null],[13,"Leader","","Volatile state on leaders:(Reinitialized after election)",10,null],[11,"new","","",11,[[["persistent",3]]]],[11,"current_term","","",11,[[],["term",6]]],[11,"voted_for","","",11,[[],[["serverid",6],["option",4]]]],[11,"commit_index","","",11,[[],["index",6]]],[11,"is_follower","","",11,[[]]],[11,"is_candidate","","",11,[[]]],[11,"is_leader","","",11,[[]]],[11,"follow_new_term","","Another server is acknowledged as leader",11,[[["term",6]]]],[11,"start_election","","No messages have been received over the election timeout.…",11,[[["serverid",6]],["requestvoterequest",3]]],[11,"become_leader","","Win an election and become a leader",11,[[["serverid",6]]]],[11,"set_commit_index","","Panics In case the term tries to decrease",11,[[["index",6]]]],[11,"last_applied","","",11,[[],["index",6]]],[11,"add_command","","Add a command from a client to this leader",11,[[],[["notleader",3],["result",4],["commandptr",6]]]],[11,"set_last_applied","","Panics In case the term tries to decrease",11,[[["index",6]]]],[11,"produce_append_entries","","Prepare heartbeat / log updates for followers #Panics if…",11,[[["serverid",6]],["vec",3]]],[11,"update_follower","","A follower has successfully appended If successful: update…",11,[[["serverid",6],["index",6]]]],[11,"follower_inconsistent","","A followers response indicates that they are inconsistent…",11,[[["serverid",6]]]],[11,"receive_append_entries","","Invoked by leader to replicate log entries (§5.3); also…",11,[[["appendentriesrequest",3],["intoiterator",8]],["appendentriesresponse",3]]],[11,"receive_request_vote","","Requested to vote for candidate 1. Reply false if term <…",11,[[["requestvoterequest",3]],["requestvoteresponse",3]]],[11,"apply_commited","","Apply all commited log items, return command pointers to…",11,[[["receiver",6]],["vec",3]]],[11,"log","","",11,[[]]],[11,"get_leader_state","","",11,[[],["leader",3]]],[0,"state_machine","raft","",null,null],[6,"Receiver","raft::state_machine","",null,null],[6,"ServerId","raft","",null,null],[6,"Term","","Time is divided into terms, and each term beginswith an…",null,null],[6,"CommandPtr","","",null,null],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","raft::log","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","raft::rpc","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","raft::server","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","raft::state","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"term","raft::rpc","",2,[[],["term",6]]],[11,"term","","",4,[[],["term",6]]],[11,"clone","raft::log","",0,[[],["item",3]]],[11,"clone","raft::rpc","",2,[[],["appendentriesrequest",3]]],[11,"clone","","",4,[[],["requestvoterequest",3]]],[11,"clone","","",5,[[],["requestvoteresponse",3]]],[11,"default","raft::state","",8,[[],["persistent",3]]],[11,"default","","",10,[[]]],[11,"eq","raft","",12,[[["notleader",3]]]],[11,"eq","raft::log","",0,[[["item",3]]]],[11,"ne","","",0,[[["item",3]]]],[11,"eq","raft::rpc","",2,[[["appendentriesrequest",3]]]],[11,"ne","","",2,[[["appendentriesrequest",3]]]],[11,"eq","raft::state","",9,[[["leader",3]]]],[11,"ne","","",9,[[["leader",3]]]],[11,"eq","","",10,[[["states",4]]]],[11,"ne","","",10,[[["states",4]]]],[11,"fmt","raft","",12,[[["formatter",3]],["result",6]]],[11,"fmt","raft::log","",0,[[["formatter",3]],["result",6]]],[11,"fmt","raft::rpc","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","raft::state","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"serialize","raft::rpc","",2,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",3,[[],["result",4]]],[11,"deserialize","","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]]],"p":[[3,"Item"],[8,"Log"],[3,"AppendEntriesRequest"],[3,"AppendEntriesResponse"],[3,"RequestVoteRequest"],[3,"RequestVoteResponse"],[8,"RPCMessage"],[3,"Server"],[3,"Persistent"],[3,"Leader"],[4,"States"],[3,"ServerState"],[3,"NotLeader"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);