var searchIndex={};
searchIndex["raft"] = {"doc":"","i":[[0,"log","raft","",null,null],[3,"Item","raft::log","",null,null],[12,"term","","",0,null],[12,"command","","",0,null],[6,"Index","","",null,null],[6,"InVec","","",null,null],[8,"Log","","",null,null],[16,"Command","","",1,null],[10,"truncate_if_different_and_append","","Check items against existing items in log, remove from log…",1,[[["self"],["index"]],["index"]]],[10,"log_term_matches","","Check whether the log entry's term at the specified index…",1,[[["term"],["self"],["index"]],["bool"]]],[11,"cmp","","Raft determines which of two logs is more up-to-date by…",1,[[["term"],["self"],["index"]],["ordering"]]],[10,"last_log_term","","",1,[[["self"]],["term"]]],[10,"last_log_index","","",1,[[["self"]],["index"]]],[10,"get_command","","",1,[[["self"],["index"]]]],[11,"new","","",0,[[["term"],["command"]],["self"]]],[0,"rpc","raft","Raft servers communicate using remote procedure…",null,null],[3,"AppendEntriesRequest","raft::rpc","Invoked by leader to replicate log entries (§5.3); also…",null,null],[12,"term","","leader’s term",2,null],[12,"leader_id","","so follower can redirect clients",2,null],[12,"prev_log_index","","index of log entry immediately precedingnew ones",2,null],[12,"prev_log_term","","term of prevlog::Index entry",2,null],[12,"entries","","log entries to store (empty for heartbeat;may send more…",2,null],[12,"leader_commit","","leader’s commitIndex",2,null],[3,"AppendEntriesResponse","","",null,null],[12,"term","","currentTerm, for leader to update itself",3,null],[12,"success","","true if follower contained entry matching prevLogIndex and…",3,null],[3,"RequestVoteRequest","","Invoked by candidates to gather votes (§5.2).",null,null],[12,"term","","candidate’s term",4,null],[12,"candidate_id","","candidate requesting vote",4,null],[12,"last_log_index","","index of candidate’s last log entry (§5.4)",4,null],[12,"last_log_term","","term of candidate’s last log entry (§5.4)",4,null],[3,"RequestVoteResponse","","",null,null],[12,"term","","currentTerm, for candidate to update itself",5,null],[12,"vote_granted","","true means candidate received vote",5,null],[8,"RPCMessage","","",null,null],[10,"term","","",6,[[["self"]],["term"]]],[0,"server","raft","",null,null],[3,"Server","raft::server","",null,null],[11,"receive_append_entries","","While waiting for votes, a candidate may receive an…",7,[[["intoiterator"],["appendentriesrequest"],["self"]],["appendentriesresponse"]]],[11,"receive_vote","","",7,[[["requestvoteresponse"],["self"],["serverid"]],[["option",["appendentriesrequest"]],["appendentriesrequest",["empty"]]]]],[0,"state","raft","",null,null],[3,"Persistent","raft::state","Persistent state on all servers:(Updated on stable storage…",null,null],[3,"Leader","","",null,null],[3,"ServerState","","Volatile state on all servers",null,null],[4,"States","","Server states. Followers only respond to requestsfrom…",null,null],[13,"Follower","","",8,null],[13,"Candidate","","",8,null],[13,"Leader","","Volatile state on leaders:(Reinitialized after election)",8,null],[11,"current_term","","",9,[[["self"]],["term"]]],[11,"voted_for","","",9,[[["self"]],[["serverid"],["option",["serverid"]]]]],[11,"commit_index","","",9,[[["self"]],["index"]]],[11,"is_follower","","",9,[[["self"]],["bool"]]],[11,"is_candidate","","",9,[[["self"]],["bool"]]],[11,"is_leader","","",9,[[["self"]],["bool"]]],[11,"follow_new_term","","",9,[[["self"],["term"]]]],[11,"start_election","","No messages have been received over the election timeout.…",9,[[["self"],["serverid"]],["requestvoterequest"]]],[11,"become_leader","","",9,[[["self"],["serverid"]]]],[11,"set_commit_index","","Panics In case the term tries to decrease",9,[[["self"],["index"]]]],[11,"last_applied","","",9,[[["self"]],["index"]]],[11,"set_last_applied","","Panics In case the term tries to decrease",9,[[["self"],["index"]]]],[11,"receive_append_entries","","Invoked by leader to replicate log entries (§5.3); also…",9,[[["intoiterator"],["appendentriesrequest"],["self"]],["appendentriesresponse"]]],[11,"receive_request_vote","","",9,[[["self"],["requestvoterequest"]],["requestvoteresponse"]]],[11,"apply_commited","","",9,[[["self"],["receiver"]]]],[0,"state_machine","raft","",null,null],[6,"Receiver","raft::state_machine","",null,null],[6,"ServerId","raft","",null,null],[6,"Term","","Time is divided into terms, and each term beginswith an…",null,null],[11,"from","raft::log","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","raft::rpc","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","raft::server","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","raft::state","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"term","raft::rpc","",2,[[["self"]],["term"]]],[11,"term","","",4,[[["self"]],["term"]]],[11,"default","raft::state","",10,[[],["persistent"]]],[11,"default","","",8,[[],["self"]]],[11,"default","","",9,[[],["serverstate"]]],[11,"eq","","",11,[[["leader"],["self"]],["bool"]]],[11,"ne","","",11,[[["leader"],["self"]],["bool"]]],[11,"eq","","",8,[[["self"],["states"]],["bool"]]],[11,"ne","","",8,[[["self"],["states"]],["bool"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"serialize","raft::rpc","",2,[[["self"],["__s"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"serialize","","",5,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",2,[[["__d"]],["result"]]],[11,"deserialize","","",3,[[["__d"]],["result"]]],[11,"deserialize","","",4,[[["__d"]],["result"]]],[11,"deserialize","","",5,[[["__d"]],["result"]]]],"p":[[3,"Item"],[8,"Log"],[3,"AppendEntriesRequest"],[3,"AppendEntriesResponse"],[3,"RequestVoteRequest"],[3,"RequestVoteResponse"],[8,"RPCMessage"],[3,"Server"],[4,"States"],[3,"ServerState"],[3,"Persistent"],[3,"Leader"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);